 #include<stdio.h>


int main()
{
   int a = 10, b=5, c;
   printf("%d\n", c);  // c being random value 50 got added to it here.
   c+=a*=b; // c = c+ a= a*b;
   printf("%d %d %d", a, b, c);

}
_________________________________________________________________________________________
#include<stdio.h>

int main()
{
   int x=0, y=5, z;
   float a=1.5, b=2.2,c;
   z=x||b;
   c = a&&b;
   printf("%d %f", z, c);
}
_________________________________________________________________________________________
#include<stdio.h>

int main()
{
   int x=0, y=5, z=10, a;
   a=x>1?y>1:z>1?100:200;  // showing error not now.
   printf("%d", a);
   return 0
}
_______________________________________________________________________________________
#include<stdio.h>

int main()
{
   int a, b=5;
   printf("%d %d\n", a, b); // yaha a =0;to b = 1 aa paaya as !a .
   a=!b;
   b=!a;
   printf("%d %d", a, b);
   return 0;
}
_______________________________________________________________________________________
#include<stdio.h>
int factorial (int);
int main()
{
   int a1, a2, sum=0;
   printf("The sum of series be:\n");

   for (int i = 1;i<=9;i++){
      a1 = factorial(i);
      a2 = factorial(i+1);
      sum=sum+(a1*a2);
   }
   printf("\t%d", sum);
}

int factorial(int num){
   int fac=1;
   for (int i = 1;i<=num;i++){
      fac*=i;
   }
   return fac;
}
_______________________________________________________________________________________
#include<stdio.h>
int factorial (int);
int main()
{
   int i;
   float num;
   int zero=0, positive=0, negative=0;
   printf("Enter the number as number of times you want:\nPress 1 to continue to enter:\n");
   scanf("%d", &i);
   while(i==1){
      printf("Enter the integer here:\n");
      scanf("%f", &num);

      if(num==0){
         zero++;
      }
      else if (num>0){
         positive++;
      }
      else if (num<0){
         negative++;
      }

      printf("Do you want to continue\n");
      scanf("%d", &i);
   }
   printf("The count be:\nZero = %d\nPositive = %d\nNegative = %d", zero, positive, negative);
   
}
_______________________________________________________________________________________
#include<stdio.h>

int main()
{
   int n, num, max=0, min = 34563;
   printf("Enter the no. of integers you want to enter.\n");
   scanf("%d", &n);
   for (int i=0;i<n;i++){
      scanf("%d", &num);

      if(num >= max){
         max = num;
      }

      if (num < min){
         min = num;
      }

   }

   printf("The range of numbers be: %d\n", max - min);
}
______________________________________________________________________________________
#include<stdio.h>
#include <math.h>
int main()
{
   int a, b, c, h, ba, p;
   printf("Enter the three sides of triangle.\n");
   scanf("%d %d %d", &a, &b, &c);

   if (a > b && a> c){
      h = a, ba = b, p = c;
   }
   else if ( b> a && b>c){
      h = b, ba = a, p = c;
   }
   else{
      h = c, ba = a, p = b;
   }

   if(pow(h, 2) == pow(ba, 2) + pow(p, 2)){
      printf("It forms a pythogorean triplet.\n");
   }
   else{
      printf("It is not.\n");
   }
}
_______________________________________________________________________________________
#include<stdio.h>
#include <math.h>

void func_tion(int, int, int, int,float*, int* , float*);
int main()
{
   int a,b,c,d,product=1;
   float avg=0, sum=0;
   printf("Enter the 4 integer values\n");
   scanf("%d %d %d %d", &a, &b, &c, &d);
   func_tion(a, b, c, d, &sum, &product, &avg);

   printf("Sum be: %.2f\nProduct be: %d\nAverage be: %.2f", sum, product, avg);
}


void func_tion(int a, int b, int c, int d,float *sum,int *product,float *avg)
{
   *sum = a+b+c+d;
   *product = a*b*c*d;
   *avg = (*sum)/4;
}
_______________________________________________________________________________________
#include <stdio.h>
void printFactors(int n, int i)
{
    if (i <= n) {
        if (n % i == 0) {
            printf("%d ", i);
        }
        printFactors(n, i + 1);
    }
}
int main()
{
    int n;
    scanf(" %d ", &n);
    printFactors(n, 1);
    return 0;
}
_______________________________________________________________________________________
#include <stdio.h>
#include <math.h>
#define PI 3.14
#define AREA(r) (PI*r*r)
#define CIRCUM(r) (2*PI*r)
#define VOL_C(r,h) ((1.0/3.0)*PI*r*r*h)
#define VOL_S(r) ((4.0/3.0)*PI*r*r*r)

int main()
{
   int rad;
   float area, h;
   printf("Enter the radius to get area\n");
   scanf("%d", &rad);
   area = AREA(rad);
   printf("The area be:%.2f", area);

   printf("\nEnter the radius to get circumference\n");
   scanf("%d", &rad);
   area = CIRCUM(rad);
   printf("The circumference be:%.2f", area);

   printf("\nEnter the radius to get volume of cone.\n");
   scanf("%d %f", &rad, &h);
   area = VOL_C(rad, h);
   printf("\nThe volume be:%.2f", area);

   printf("\nEnter the radius to get volume of sphere.\n");
   scanf("%d", &rad);
   area = VOL_S(rad);
   printf("\nThe volume be:%.2f", area);
}
_______________________________________________________________________________________
#include <stdio.h>
int main() {
    printf("Size of char: %d\n", sizeof(char));
    printf("Size of int: %d\n", sizeof(int));
    printf("Size of float: %d\n", sizeof(float));
    printf("Size of double: %d\n", sizeof(double));
    printf("Size of long double: %d\n", sizeof(long double));
    return 0;
}
________________________________________________________________________________________
#include <stdio.h>
int find_integer_occurences(int *, int, int);
int main()
{
    int num, s, a=-1;
    printf("Enter the element you want to check.\n");
    scanf("%d", &num);
    int arr[] = {1,2,3,4,5,5,6,7,8,9,5,6,3,4,6,3,5,4,5,3,5,2};
    s = sizeof(arr);
    a = find_integer_occurences(arr, s, num);
    printf("The no. of times it occur is %d\n", a-1); // here it is showing 1 for 0 no. of occurence so used a-1...but why?
}
int find_integer_occurences(int *array, int size, int integer) {
  int count = 0;
  for (int i = 0; i < size; i++) {
    if (array[i] == integer) {
      count++;
    }
  }
  return count;
}
_______________________________________________________________________________________
3. has been done.
_______________________________________________________________________________________
#include<stdio.h>
#include<string.h>
int main(){
   int i,j,n;
   char str[100][100],s[100];
   printf("Enter number of names :");
   scanf("%d",&n);
   printf("Enter names in any order:");
   for(i=0;i<n;i++){
      scanf("%s",str[i]);
   }
   for(i=0;i<n;i++){
      for(j=i+1;j<n;j++){
         if(strcmp(str[i],str[j])>0){
            strcpy(s,str[i]);  // swapping is done here by using spare s[100] string.
            strcpy(str[i],str[j]);
            strcpy(str[j],s);
         }
      }
   }
   printf("The sorted order of names are:");
   for(i=0;i<n;i++){
      printf("%s\n",str[i]);  // printing the reversed list.
   }
}
_______________________________________________________________________________________
#include<stdio.h>
#include<string.h>
int main(){
    int r, c, sum_r=0, sum_c=0;
   int arr[5][5] = {1, 2, 3, 4, 5,
                    6, 7, 8, 9, 10,
                    11, 12, 13, 14, 15,
                    16, 17, 18, 19, 20,
                    21, 22, 23, 24, 25};
    printf("Enter the ith row and column to check the condition: \n");
    scanf("%d %d", &r, &c);

    for(int i=0;i<5;i++){
        sum_r = sum_r + arr[r][i];
        sum_c = sum_c + arr[i][c]; // here i took r and c as two indexed specific for row and column separately.
    }

    printf("%d\t%d\n\n", sum_r, sum_c);
    if (sum_r == sum_c){
        printf("The condition is true.\n");
    }
}
_______________________________________________________________________________________
#include<stdio.h>
#include<string.h>
int mul(int, int);
int main(){
    int a,b,c;
    printf("Enter the two integers\n");
    scanf("%d %d", &a, &b);
    // multiply using bit wise operators.
    c = mul(a, b);

    printf("%d is the result.", c);

}

int mul (int a, int b)
{
    int result = 0;
    while(b>0){
        if(b&1){
            result +=a;
        }

        a<<=1; // left shift.
        b>>=1;  //right shift.
    }

    return result;
}
______________________________________________________________________________________
#include<stdio.h>
#include<string.h>

int main()
{
    FILE *fs;
    int count = 0;
    char ch;
    fs = fopen("File (e)1.txt", "r");

    if(fs == NULL){
        puts("Cannot open file.");
    }

    while((ch = fgetc(fs)) != EOF){
        printf("%c", ch);
        count++;
    }

    printf("\n\nThe no. of words be: %d", count);
}
_______________________________________________________________________________________
#include<stdio.h>
#include<string.h>

int main(int argc,char *argv[])
{ // D:\naman c\code.c

    printf("%d is the no. of args.\n", argc);
    for(int i =0;i<argc;i++){
        printf("agrc %d - %s, %i, %lf\n", i, argv[i], atoi(argv[i]), atof(argv[i]));
    }
      // if you want to convert your argument into numbers use atof() function.
      // which is like ASCII to float and atoi() to integer.
}
______________________________________________________________________________________
 gcc code.c -o code
PS D:\naman_c> ./code abc 23 4.56
4 is the no. of args.
agrc 0 - D:\naman_c\code.exe
agrc 1 - abc
agrc 2 - 23
agrc 3 - 4.56
_______________________________________________________________________________________
PS D:\naman_c> gcc code.c -o code
PS D:\naman_c> ./code 5 1 2 3 4 6
21 is the sum.
PS D:\naman_c> gcc code.c -o code
PS D:\naman_c> ./code 5 1 2 3 4 6
21 is the sum.
7
0       5       1       2       3       4       6
PS D:\naman_c> gcc code.c -o code
PS D:\naman_c> ./code 5 1 2 3 4 6
21 is the sum.
7
 D:\naman_c\code.exe - 0         5 - 5   1 - 1   2 - 2   3 - 3   4 - 4   6 - 6
#include<stdio.h>
#include <stdlib.h>
#include<string.h>

int main(int argc,char *argv[])
{
    int sum=0;
    for (int i = 0;i<argc;i++){
        sum =sum + atoi(argv[i]);
    }
    printf("%d is the sum.\n", sum);
    printf("%d\n", argc);
    for(int i =0;i<argc;i++){
        printf(" %s - %d\t", argv[i],atoi(argv[i]));
    }
    
}

PS D:\naman_c> gcc code.c  // it is working too.
PS D:\naman_c> ./code 56 7 8 9 9 
89 is the sum.
6
 D:\naman_c\code.exe - 0         56 - 56         7 - 7   8 - 8   9 - 9   9 - 9
_______________________________________________________________________________________



Those options do very different things:

-c tells GCC to compile a source file into a .o object file. Without that option, it'll default to compiling and linking the code into a complete executable program, which only works if you give it all your .c files at the same time. To compile files individually so they can be linked later, you need -c.
-o sets the name of the output file that GCC produces. You're using it when linking object files to make a complete program, and the default output filename for that is a.out. If you don't want your program to be called a.out, you use -o to specify a different name.
_________________________________________________________________________________________________________

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

int compareFiles(FILE *file1, FILE *file2) {
    int char1, char2;

    do {
        char1 = fgetc(file1);
        char2 = fgetc(file2);

        if (char1 != char2) {
            return 0; // Files are different
        }
    } while (char1 != EOF && char2 != EOF);

    return 1; // Files are the same
}

int main() {
    FILE *file1, *file2;
    char filename1[100], filename2[100];

    printf("Enter the first file name: ");
    gets(filename1);

    printf("Enter the second file name: ");
    gets(filename2);

    file1 = fopen(filename1, "r");
    file2 = fopen(filename2, "r");

    if (file1 == NULL || file2 == NULL) {
        perror("Error opening files");
        return 1;
    }

    if (compareFiles(file1, file2)) {
        printf("Files are identical.\n");
    } else {
        printf("Files are different.\n");
    }

    fclose(file1);
    fclose(file2);

    return 0;
}
_____________________________________________________________________________________

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

int main() {
    
    perror("ijfd"); // print error.
    return 0;
 //  : No error
// ijfd: No error
}
_____________________________________________________________________________________
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

int main(int argc, char *argv[])
{ 
    return 0;// here nothing is returned for now as i run it using gcc command..
}
______________________________________________________________________________________
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

int main(int argc, char *argv[])
{ 
    printf("df");
    return 0;// here df being printed.
}
_____________________________________________________________________________________
