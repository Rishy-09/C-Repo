#include<stdio.h>

int main()
{
	int i;
	for (i = 0; i <= 50000; i++)
		printf("\n%d", i);
	return 0;
}
Output: 

1
2
3
4
.
.
.
50000

____________________________________________________________________________

#include<stdio.h>
int main()
{
	float a = 13.5;
	double b = 13.5;
	printf("\n%f %lf", a, b);
	return 0;
}
Output: 13.50000 13.50000

____________________________________________________________________________

#include<stdio.h>
int i = 0;
void val();
int main()
{
	printf("\nmain's i = %d", i);
	i++;
	val();
	printf("\nmain's i = %d", i);
	val();
	return 0;
}
void val()
{
	i = 100;
	printf("\nval's i = %d", i);
	i++;
}
Output: 

main's i = 0
val's i = 100
main's i = 101
val's i = 100

____________________________________________________________________________

#include<stdio.h>
int f(int);
int g(int);
int main()
{
	int x, y, s = 2;
	s *= 3;
	y = f(s);
	x = g(s);
	printf("\n%d %d %d", s, y, x);
	return 0;
}
int t = 8;

int f(int a)
{
	a += -5;
	t -= 4;
	return (a + t);
}

int g(int a)
{
	a = 1;
	t += a;
	return (a + t);
}
Output: 6 5 6

____________________________________________________________________________

#include<stdio.h>
int main()
{
	static int count = 5;
	printf("\ncount = %d", count--);
	if (count != 0)
		main();
	return 0;
}
Output: 

5
4
3
2
1

____________________________________________________________________________

#include<stdio.h>
void func();
int main()
{
	func();
	func();
	return 0;
}
void func()
{
	auto int i = 0;
	register int j = 0;
	static int k = 0;
	i++; j++; k++;
	printf("\n %d % d %d", i, j, k);
}
Output: 

1 1 1
1 1 2

While in some compilers (like Visual Studio), using auto as type-specifier may result in an error.

____________________________________________________________________________

#include<stdio.h>
int x = 10;
int main()
{
	int x = 20;
	{
		int x = 30;
		printf("\n%d", x);
	}
	printf("\n%d", x);
	return 0;
}
Output: 

30
20

___________________________________________________________________________

errors::

#include<stdio.h>
int main()
{
	long num;
	num = 2;
	printf("\n%ld", num);
	return 0;
}
Error: No error
_____________________________________________________________________________________
#include<stdio.h>
int main()
{
	char ch = 200;
	printf("\n%d", ch);
	return 0;
}
Error: No error but a warning, as we are saving an integer to a char type variable, it just truncates that value and store.

-56 is coming as output.

______________________________________________________________________

#include<stdio.h>
int main()
{
	unsigned a = 25;
	long unsigned b = 25l;
	printf("\n%lu %u", a, b);
	return 0;
}
Error: No error

______________________________________________________________________

#include<stdio.h>
int main()
{
	long float a = 25.345e454;
	unsigned double b = 25;
	printf("\n%lf %d", a, b);
	return 0;
}
Error: a double cannot be unsigned, and a warning that value of float is out of range.

______________________________________________________________________

#include<stdio.h> static int y; int main() { static int z; printf("%d %d", y, z); return 0; }
Error: No error

output be:

0 0

______________________________________________________________________

#include<stdio.h> int main() { float a = 25.345; float *b; b = &a; printf("\n%f %u", a, b); return 0; }
Error: No error

25.344999 6422296 as output.

____________________________________________________

The address of register variable is not accessible. 


True. (In case of C, but in C++, it is accessible.)

A variable can only have only one storage class.

