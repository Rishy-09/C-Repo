#include <stdio.h>
int main()
{
   printf("%10.1f%10.1f%10.1f\n", 5.0, 13.5, 133.9);
   printf("%10.1f%10.1f%10.1f\n", 305.0, 1200.9, 3005.3);
   return 0;
   printf("Hello");  // hello will not be printed.

}

int main()
{
   char ch= 'z';
   int i = 125;
   float a= 12.55;
   char s[] = "hello there !";
   printf("%c %d %f\n", ch, ch, ch);
   printf("%s %d %f\n", s, s, s);  // here %d is getting the base address of string. 
   printf("%c %d %f\n", i, i, i);
   printf("%f %d\n", a, a);

   return 0;
   
}

int main()
{
   int i = 10;
   char ch = 'A';
   float a = 3.14;
   char str[20];
   printf("%d %c %f\n", i, ch, a);
   sprintf(str, "%d %c %f", i, ch, a);
   printf("%s\n", str);
   return 0;
   
}

#include <stdio.h>
#include<conio.h>
// unformatted console I/O;
int main()
{
   char ch;
   printf("Press any key to continue");
   getch(); /*will not echo the character typed*/

   printf("\nType any character");
   ch = getche(); /*will echo the character typed*/

   printf("\nType any character\n");
   getchar(); /*will echo character, must be followed by the enter key*/
   printf("\nContinue Y/N");
   fflush(stdin);     // this is used to run the fgetchar as it was not taking input from the user lately.
   fgetchar(); /*will echo character, must be followed by the enter key*/
   
}

#include <stdio.h>
#include<conio.h>
// unformatted console I/O;
int main()
{
   char name [50];
   puts("Enter name");
   gets(name); /*sends base address of array*/
   puts("Happy Footballing");
   puts(name);
   return 0;
}
______________________________________________________________________________________

As geekosaur said, you are not handling the newline left behind by scanf. You can modify your scanf format string to take it into account:

scanf("%d *[^\n]", &N);
*[^\n] says to ignore everything after your integer input that isn't a newline, but don't do anything with the newline (skip it).

___________________________________________________________________________________________________________

:::::::::::::::::::::::::::::::::::EXERCISE:::::::::::::::::::::::::::::



#include<stdio.h>
#include<ctype.h>
int main()
{
	char ch;
	ch = getchar();
	if (islower(ch))
		putchar(toupper(ch));
	else
		putchar(tolower(ch));
	return 0;
}
Output: If the upper case letter is entered so lower case of it will be printed otherwise is the lower case is entered so uppercase will be printed.
#include<stdio.h>
int main()
{
	int i = 2;
	float f = 2.5367;
	char str[] = "Life is like that";
	printf("\n%4d\t%3.3f\t%4s", i, f, str);

	return 0;
}
Output:   2    2.537   Life is like that


#include<stdio.h>
int main()
{
   printf("foo\bbar\n");/*
\b and \r are rarely used in practice. I just found out that I misunderstood 
these two escape sequences. A simple test:

printf("foo\bbar\n");
I expected it to output fobar, because \b will backspace the cursor, 
and b will overwrite the second o */

   printf("foo\rbar\n");
   /*I thought \r will move the cursor to the beginning of the current line, 
   so bar will replace foo, so the final output should be bar*/

   return 0;
}
/*The interpretation of the backspace and carriage return characters 
is left to the software you use for display. A terminal emulator, when displaying \b would move the cursor one 
step back, and when displaying \r to the beginning of the line. If you print these 
characters somewhere else, like a text file, the software may choose. to do something else.*/

#include<stdio.h>
int main()
{
	printf("More often than \b\b not \rthe person who \
 wins is the one who thinks he can!");

	return 0;
}
Output: the person who wins is the one who thinks he can!

______________________________________________________________________

#include<conio.h>
char p[] = "The sixth sick sheikh's sixth ship is sick";
int main()
{
	int i = 0;
	while (p[i] != '\0')
	{
		putch(p[i]);
		i++;
	}

	return 0;
}
Output: The sixth sick sheikh's sixth ship is sick

______________________________________________________________________

#include<stdio.h>
int main()
{
	int i;
	char a[] = "Hello";
	while (a != '\0')
	{
		printf("%c", *a);
		a++;
	}
	return 0;
}
Error: 'a' is an array of characters, which is initialized at the time of declaration, so it cannot be modified. i.e. writing 'a++' is illegal.

______________________________________________________________________

#include<stdio.h>
int main()
{
	double dval;
	scanf("%f", &dval);
	printf("\nDouble Value = %lf", dval);
	return 0;
}
Error:  Wrong format specifier used, in scanf()

___________________________________________________________________

#include<stdio.h>
int main()
{
	int ival;
	scanf("%d\n", &n);
	printf("\nInteger Value = %d", ival);
	return 0;
}
Error: n is undefined in scanf().

______________________________________________________________________

#include<stdio.h>
int main()
{
	char *mess[5];
	for (i = 0; i < 5; i++)
		scanf("%s", mess[i]);
	return 0;
}
Error:
1. i is undefined.
2. We cannot save the string in a char type pointer from scanf() function.

____________________________________________________________________

#include<stdio.h>
int main()
{
	int dd, mm, yy;
	printf("\nEnter day, month and year\n");
	scanf("%d%*c%d%*c%d", &dd, &mm, &yy);
	printf("The date is: %d - %d - %d", dd, mm, yy);
	return 0;
}
Error: No error, but the output dd-mm-yy (as entered) Now, what is %*c in scanf() function. %*c means after each %d is that, after every integer entered, space or Enter key hit, is read from the keyboard but ignored and next read item is stored in the variable.

_____________________________________________________________________

#include<stdio.h>
int main()
{
	char text;
	sprintf(text, "%4d\t%2.2f\n%s", 12, 3.452, "Merry Go Round");
	printf("\n%s", text);
	return 0;
}
Error: sprintf() the first argument should be of the array of characters char*, instead of char type.

______________________________________________________________________

#include<stdio.h>
int main()
{
	char buffer[50];
	int no = 97;
	double val = 2.34174;
	char name[10] = "Shweta";
	sprintf(buffer, "%d %lf %s", no, val, name);
	printf("\n%s", buffer);
	sscanf(buffer, "%4d %2.2lf %s", &no, &val, name); //convert string characters into variables in C

	printf("\n%s", buffer);
	printf("\n%d %lf %s", no, val, name);
	return 0;
}
Error: No error but the warning, "format specifier" should not be used in scanf() or sscanf() functions.

__________________________________________________________________

difference among the four :-

1. getch() : This is a function defined in the file conio.h and used to get a single character from the keyboard, without displaying it on screen, and no need to press enter after you enter the character.

2. getche() : This is a function same as getch(), but the only is that getche() displays the character you enter on the screen when you hit the button while getch() doing the same without1 displaying it on screen. e in getche() function means echoes means displays. Its prototype is present in conio.h

3.getchar() : getche() is not a function, but it is a macro, present in stdio.h the file. It is used to get the character from the keyboard after pressing enter.

4. fgetchar() : fgetchar() is same as getchar(), the only difference between them is that fgetchar() is a function while getchar() is the macro, both are present in the same file stdio.h

SECTION D:-

questions: : 

#include "gets_puts.h"
int main()
{
   printf("abd");
   if ("avcvf")   // WORKING ON GETS_PUTS.h only 
   {
      printf("EEF");
   }
}
#include "gets_puts.h" // now this header file is moved to another folder so not working 
int main()
{
   printf("abd");
   if ("avcvf")   // WORKING ON GETS_PUTS.h only 
   {
      printf("EEF");
   }
}
________________________________________________________________________________

#include<stdio.h>

void xgets(char *str){
    scanf("%[^\n]s", str);

}

void xputs(char *str)
{
    printf("%s\n", str);
}
/*By putting [^\n] inbetween % and s in scanf() function
will cause the function to accept even string after enter 
has hit*/
_______________________________________________________________________________

#include <stdio.h>
int getint(void);
int main()
{
int a;
a = getint();
printf("you entered %d\n", a);
printf("\n%d", sizeof (a)); // iska 4 
return 0;
}
int getint()
{
   int num = 0;
   char number[20];
   printf("Enter any integer value\n");
   scanf("%s", number);
   printf("\n%d\n", sizeof(number)); // 20 hi rahegaa.
   sscanf(number, "%d", &num); // string me jo value thi use num ke address pe int ke form me bhej diyaa.
   return num;
}
________________________________________________________________________________
question 3:::::::
#include <stdio.h>
double getfloat(void);
int main()  /*Main is written to check the getfloat function*/
{
double a;
a = getfloat();
printf("you entered %lf\n", a);
printf("\n%d", sizeof (a)); // iska 8
return 0;
}
double getfloat()
{
   double num = 0;
   char number[20];
   printf("Enter any integer value\n");
   scanf("%s", number);
   printf("\n%d\n", sizeof(number)); // 20 hi rahegaa.
   sscanf(number, "%lf", &num); // string me jo value thi use num ke address pe int ke form me bhej diyaa.
   return num;
}
______________________________________________________________________________
question 4:::
%-26s%-18s%3.2f as solution.
